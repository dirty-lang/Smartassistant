# -*- coding: utf-8 -*-
"""README.md

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PPoPcMpMXi-0KwEeDbhlElGEg8Get5nT
"""

!pip install requests wikipedia-api transformers flask flask-ngrok

pip install SpeechRecognition pyaudio

import requests

def get_weather(city):
    api_key = "87480a5ba12cf8befe50b089f19a6737"  # Get this from OpenWeatherMap website
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather = data['weather'][0]['description']
        temperature = data['main']['temp']
        return f"The weather in {city} is {weather} with a temperature of {temperature}째C."
    else:
        return "Sorry, I couldn't fetch the weather data."

# Test the function in Colab
city = input("Enter the city name for weather: ")
print(get_weather(city))

import requests

def get_news():
    url = "https://newsdata.io/api/1/news?apikey=pub_63562af1b1654006a09ca31870395cbe5a08c&q=news&country=in "  # Replace with your News API key
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if 'articles' in data:
            articles = data['articles']
            news = ""
            for article in articles[:5]:  # Fetching top 5 headlines
                news += article['title'] + "\n"
            return news
        else:
            return f"Unexpected response format: {data}"
    else:
        return f"Error: Unable to fetch news (status code: {response.status_code})"

# Test the function in Colab
print(get_news())

import wikipediaapi

def get_wikipedia_summary(query):
    user_agent = "MyWikipediaBot/1.0 (myemail@example.com)"  # Replace with your custom User-Agent
    wiki = wikipediaapi.Wikipedia(
        language='en',
        user_agent=user_agent
    )
    page = wiki.page(query)
    if page.exists():
        return page.summary[:1000] + "..."  # Limit summary to the first 1000 characters
    else:
        return "Sorry, I couldn't find any information on that topic."

# Test the function in Colab
query = input("Enter a topic to search on Wikipedia: ")
print(get_wikipedia_summary(query))

import wikipediaapi
import requests

# Weather Function
def get_weather(city):
    api_key = "87480a5ba12cf8befe50b089f19a6737"  # OpenWeatherMap API Key
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        try:
            weather = data['weather'][0]['description']
            temperature = data['main']['temp']
            return f"The weather in {city} is {weather} with a temperature of {temperature}째C."
        except KeyError:
            return "Sorry, I couldn't fetch the weather details for this city. Please try again."
    else:
        return f"Error: {response.status_code}. Unable to fetch weather data. Check the city name or try later."

# News Function
def get_news():
    news_api_key = "pub_63562af1b1654006a09ca31870395cbe5a08c"  # NewsData API Key
    url = f"https://newsdata.io/api/1/news?apikey={news_api_key}&q=news&country=in"
    response = requests.get(url)
    if response.status_code == 200:
        articles = response.json().get('results', [])
        if articles:
            news = "\n".join([article['title'] for article in articles[:5]])
            return news
        else:
            return "No news found."
    else:
        return "Sorry, I couldn't fetch the news."

# Wikipedia Function
def get_wikipedia_summary(query):
    user_agent = "MyWikipediaBot/1.0 (myemail@example.com)"
    wiki = wikipediaapi.Wikipedia(
        language='en',
        user_agent=user_agent
    )
    page = wiki.page(query)
    if page.exists():
        return page.summary[:500] + "..."
    else:
        return "Sorry, I couldn't find any information on that topic."

# Main Function
def main():
    print("Hi, I am your Intelligent Assistant! How can I help you?")
    while True:
        print("\nCommands: 'weather', 'news', 'wiki', 'exit'")
        command = input("Enter your command: ").lower()

        if "weather" in command:
            city = input("Which city's weather do you want to know? ")
            print(get_weather(city))
        elif "news" in command:
            print("Here are the top news headlines:")
            print(get_news())
        elif "wiki" in command:
            query = input("What topic should I search on Wikipedia? ")
            print(get_wikipedia_summary(query))
        elif "exit" in command:
            print("Goodbye!")
            break
        else:
            print("Sorry, I didn't understand that command.")

# Run the assistant
main()

import time

start_time = time.time()
print(get_news())
print(f"News fetching took {time.time() - start_time} seconds.")

import wikipediaapi
import requests

# Weather Function
def get_weather(city):
    api_key = "87480a5ba12cf8befe50b089f19a6737"  # OpenWeatherMap API Key
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        try:
            weather = data['weather'][0]['description']
            temperature = data['main']['temp']
            return f"The weather in {city} is {weather} with a temperature of {temperature}째C."
        except KeyError:
            return "Sorry, I couldn't fetch the weather details for this city. Please try again."
    else:
        return f"Error: {response.status_code}. Unable to fetch weather data. Check the city name or try later."

# News Function
def get_news():
    news_api_key = "pub_63562af1b1654006a09ca31870395cbe5a08c"  # NewsData API Key
    url = f"https://newsdata.io/api/1/news?apikey={news_api_key}&q=news&country=in&language=en"
    response = requests.get(url)
    if response.status_code == 200:
        articles = response.json().get('results', [])
        if articles:
            news = "\n".join([article['title'] for article in articles[:5]])
            return news
        else:
            return "No news found."
    else:
        return "Sorry, I couldn't fetch the news."

# Wikipedia Function
def get_wikipedia_summary(query):
    user_agent = "MyWikipediaBot/1.0 (myemail@example.com)"
    wiki = wikipediaapi.Wikipedia(
        language='en',
        user_agent=user_agent
    )
    page = wiki.page(query)
    if page.exists():
        return page.summary[:500] + "..."
    else:
        return "Sorry, I couldn't find any information on that topic."

# Main Function
def main():
    print("Hi, I am your Intelligent Assistant! How can I help you?")
    while True:
        print("\nCommands: 'weather', 'news', 'wiki', 'exit'")
        command = input("Enter your command: ").lower()

        if "weather" in command:
            city = input("Which city's weather do you want to know? ")
            print(get_weather(city))
        elif "news" in command:
            print("Here are the top news headlines:")
            print(get_news())
        elif "wiki" in command:
            query = input("What topic should I search on Wikipedia? ")
            print(get_wikipedia_summary(query))
        elif "exit" in command:
            print("Goodbye!")
            break
        else:
            print("Sorry, I didn't understand that command.")

# Run the assistant
main()

pip install SpeechRecognition pyttsx3 wikipedia-api requests

import pyttsx3

def speak(text):
    engine = pyttsx3.init('sapi5')  # For Windows, 'sapi5' is a good option
    engine.say(text)
    engine.runAndWait()

pip install gTTS

from gtts import gTTS
import os

def speak(text):
    tts = gTTS(text=text, lang='en')
    tts.save("output.mp3")
    os.system("mpg321 output.mp3")  # This command will play the audio on Linux systems



import wikipediaapi
import requests
import speech_recognition as sr
import pyttsx3

# Weather Function
def get_weather(city):
    api_key = "87480a5ba12cf8befe50b089f19a6737"  # OpenWeatherMap API Key
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        try:
            weather = data['weather'][0]['description']
            temperature = data['main']['temp']
            return f"The weather in {city} is {weather} with a temperature of {temperature}째C."
        except KeyError:
            return "Sorry, I couldn't fetch the weather details for this city. Please try again."
    else:
        return f"Error: {response.status_code}. Unable to fetch weather data. Check the city name or try later."

# News Function
def get_news():
    news_api_key = "pub_63562af1b1654006a09ca31870395cbe5a08c"  # NewsData API Key
    url = f"https://newsdata.io/api/1/news?apikey={news_api_key}&q=news&country=in"
    response = requests.get(url)
    if response.status_code == 200:
        articles = response.json().get('results', [])
        if articles:
            news = "\n".join([article['title'] for article in articles[:5]])
            return news
        else:
            return "No news found."
    else:
        return "Sorry, I couldn't fetch the news."

# Wikipedia Function
def get_wikipedia_summary(query):
    user_agent = "MyWikipediaBot/1.0 (myemail@example.com)"
    wiki = wikipediaapi.Wikipedia(
        language='en',
        user_agent=user_agent
    )
    page = wiki.page(query)
    if page.exists():
        return page.summary[:500] + "..."
    else:
        return "Sorry, I couldn't find any information on that topic."

# Speech Recognition Function
def listen_command():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening for command...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        command = recognizer.recognize_google(audio).lower()
        print(f"Command recognized: {command}")
        return command
    except sr.UnknownValueError:
        print("Sorry, I didn't understand that.")
        return ""
    except sr.RequestError:
        print("Sorry, I couldn't connect to the speech service.")
        return ""

# Text-to-Speech Function
def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

# Main Function
def main():
    speak("Hi, I am your Intelligent Assistant! How can I help you?")
    while True:
        print("\nCommands: 'weather', 'news', 'wiki', 'exit'")
        speak("Listening for your command...")

        command = listen_command()

        if "weather" in command:
            speak("Which city's weather do you want to know?")
            print("Which city's weather do you want to know?")
            city = input("Enter city name: ")
            speak(get_weather(city))
        elif "news" in command:
            speak("Here are the top news headlines:")
            print("Here are the top news headlines:")
            speak(get_news())
        elif "wiki" in command:
            speak("What topic should I search on Wikipedia?")
            print("What topic should I search on Wikipedia?")
            query = input("Enter Wikipedia query: ")
            speak(get_wikipedia_summary(query))
        elif "exit" in command:
            speak("Goodbye!")
            print("Goodbye!")
            break
        else:
            speak("Sorry, I didn't understand that command.")
            print("Sorry, I didn't understand that command.")

# Run the assistant
if __name__ == "__main__":
    main()

!pip install gTTS

from gtts import gTTS
import os

def speak(text):
    tts = gTTS(text=text, lang='en')
    tts.save("output.mp3")
    os.system("mpg321 output.mp3")  # Linux command to play audio
    # On Windows or macOS, you may use different methods to play audio, like using 'winsound' or 'playsound' modules.

!pip install gTTS requests wikipedia-api

import wikipediaapi
import requests
from gtts import gTTS
import os

# Weather Function
def get_weather(city):
    api_key = "87480a5ba12cf8befe50b089f19a6737"  # OpenWeatherMap API Key
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        try:
            weather = data['weather'][0]['description']
            temperature = data['main']['temp']
            return f"The weather in {city} is {weather} with a temperature of {temperature}째C."
        except KeyError:
            return "Sorry, I couldn't fetch the weather details for this city. Please try again."
    else:
        return f"Error: {response.status_code}. Unable to fetch weather data. Check the city name or try later."

# News Function
def get_news():
    news_api_key = "pub_63562af1b1654006a09ca31870395cbe5a08c"  # NewsData API Key
    url = f"https://newsdata.io/api/1/news?apikey={news_api_key}&q=news&country=in"
    response = requests.get(url)
    if response.status_code == 200:
        articles = response.json().get('results', [])
        if articles:
            news = "\n".join([article['title'] for article in articles[:5]])
            return news
        else:
            return "No news found."
    else:
        return "Sorry, I couldn't fetch the news."

# Wikipedia Function
def get_wikipedia_summary(query):
    user_agent = "MyWikipediaBot/1.0 (myemail@example.com)"
    wiki = wikipediaapi.Wikipedia(
        language='en',
        user_agent=user_agent
    )
    page = wiki.page(query)
    if page.exists():
        return page.summary[:500] + "..."
    else:
        return "Sorry, I couldn't find any information on that topic."

# Text-to-Speech Function using gTTS
def speak(text):
    tts = gTTS(text=text, lang='en')
    tts.save("output.mp3")
    os.system("mpg321 output.mp3")  # Linux command to play audio
    # For Windows or macOS, you can use 'playsound' instead of mpg321:
    # from playsound import playsound
    # playsound('output.mp3')

# Main Function
def main():
    print("Hi, I am your Intelligent Assistant! How can I help you?")
    while True:
        print("\nCommands: 'weather', 'news', 'wiki', 'exit'")
        command = input("Enter your command: ").lower()

        if "weather" in command:
            city = input("Which city's weather do you want to know? ")
            weather_info = get_weather(city)
            print(weather_info)
            speak(weather_info)  # Speak the weather info
        elif "news" in command:
            print("Here are the top news headlines:")
            news_info = get_news()
            print(news_info)
            speak(news_info)  # Speak the news headlines
        elif "wiki" in command:
            query = input("What topic should I search on Wikipedia? ")
            wiki_info = get_wikipedia_summary(query)
            print(wiki_info)
            speak(wiki_info)  # Speak the Wikipedia summary
        elif "exit" in command:
            print("Goodbye!")
            speak("Goodbye!")  # Speak the exit message
            break
        else:
            print("Sorry, I didn't understand that command.")
            speak("Sorry, I didn't understand that command.")  # Speak if command is not recognized

# Run the assistant
main()

# Create a README.md file
with open("/content/README.md", "w") as file:
    file.write("# Project Title\n\n")
    file.write("## Project Description\n\n")
    file.write("This is a detailed documentation for the project.\n")
    file.write("Add information about the project, its functionalities, and how to use it.\n")

with open("/content/README.md", "w") as file:
    file.write("# Intelligent Assistant Project\n\n")
    file.write("## Project Description\n\n")
    file.write("This project is a Python-based intelligent assistant that can provide weather information, news, and Wikipedia summaries. It uses voice commands and outputs results through speech synthesis.\n\n")

    file.write("## Features\n")
    file.write("- Weather information retrieval\n")
    file.write("- News headlines from a news API\n")
    file.write("- Wikipedia summary search\n")
    file.write("- Voice command support\n")

    file.write("## Installation\n")
    file.write("To install the necessary packages, use the following commands:\n")
    file.write("```bash\n")
    file.write("pip install pyttsx3 speechrecognition wikipedia-api requests\n")
    file.write("```\n")

    file.write("## Usage\n")
    file.write("Run the script and interact with the assistant using voice commands. You can ask about the weather, latest news, or search Wikipedia.\n\n")

    file.write("## License\n")
    file.write("This project is licensed under the MIT License.\n")

# Display the contents of the README.md file
!cat /content/README.md

from google.colab import files
files.download('/content/README.md')